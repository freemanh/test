swagger: '2.0'
info:
  description: >
    This is a sample server Petstore server.


    [Learn about Swagger](http://swagger.io) or join the IRC channel `#swagger`
    on irc.freenode.net.


    For this sample, you can use the api key `special-key` to test the
    authorization filters
  version: 1.0.0
  title: Huoxingyun
  termsOfService: ''
  contact:
    name: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: api.huoxixngyun.com
basePath: /v1
schemes:
  - http
paths:
  /login/admin:
    post:
      tags:
        - login
      summary: store owner login system
      description: ''
      
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK (successfully authenticated)
        '401':
          description: Authentication information is missing or invalid
  
  /login/pos:
    post:
      tags:
        - login
      summary: cashier login system
      description: ''
      
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - basicAuth: []
      responses:
        '200':
          description: OK (successfully authenticated)
        '401':
          description: Authentication information is missing or invalid
  
  /verify-code:
    get:
      tags:
        - sms
      summary: ''
      parameters:
        - in: query
          name: mobile
          required: true
          type: string

      responses:
        '200':
          description: OK
          schema:
            type: object
            properties:
              code:
                type: string
                description: verification code.
                example: '783012'
        '401':
          description: invalid api key
          
  /sign-up/admin:
    post:
      tags:
        - sign up
      summary: 'store owner sign up admin console'
      parameters: 
        - in: body
          name: registry
          schema:
            $ref: '#/definitions/SignUpRequest'
          
      responses:
        '200':
          description: OK
        '400':
          description: invalid parameter
          schema: 
            type: string
            example: "password is invalid/verification code is invalid"
            
  /store-types:
    get:
      summary: "get store type list"
      tags:
        - 'store'
      responses:
        '200': 
          description: OK
          examples:
            application/json: 
              [{"id":1, "name": "Drink","addTime": "2017-07-06T09:01:00Z","updateTime":"2017-07-06T09:01:00Z"},{"id":2, "name": "FastFood","addTime": "2017-07-06T09:01:00Z","updateTime":"2017-07-06T09:01:00Z"}]
  
  /validate-referral-code:
    get:
      summary: "validate referral code"
      parameters: 
        - in: query
          name: code
          type: string
      responses:
        200: 
          description: OK
      
            
  /stores:
    post:
      summary: "add a store"
      tags: 
        - 'store'
      parameters:
        - in: body
          name: store
          schema:
            type: object
            properties:
              name:
                type: string
              typeId:
                type: integer
              addr:
                type: string
              referralCode:
                type: string
          
      responses:
        200: 
          description: OK
        400:
          description: Bad request, store exist/referral code invalid
    
    get:
      summary: "get store list"
      tags: 
        - 'store'
      security:
        - basicAuth: []
      responses:
        200:
          description: OK
          examples: 
            application/json: [{"id": 1, "name":"wangba", "addr": "Chengdu", "referralCode":"1101", "addTime": "2017-07-06T09:01:00Z","updateTime":"2017-07-06T09:01:00Z"}]
          
      
  /stores/{storeId}:
    get:
      summary: "get a store"
      tags: 
        - 'store'
      parameters: 
        - in: path
          name: storeId
          type: string
          required: true
      responses:
        200:
          description: OK
          examples: 
            application/json: {"id": 1, "name":"wangba", "addr": "Chengdu", "referralCode":"1101", "addTime": "2017-07-06T09:01:00Z","updateTime":"2017-07-06T09:01:00Z"}
        404:
          description: Not Found
  
  /stores/{storeId}/jobs:
    post:
      summary: 'add a job type'
      tags: 
        - 'store'
      parameters:
        - in: body
          name: job
          schema:
            type: object
            properties:
              name:
                type: string
          required: true
          
        - in: path
          name: storeId
          type: string
          required: true
      responses:
        '200':
          description: OK
          
    get:
      summary: 'get all jobs and order by add time'
      tags: 
        - 'store'
      parameters: 
        - in: path
          name: storeId
          type: string
          required: true
      responses:
        200:
          description: OK
          examples: 
            application/json: [{"id":1, "name":"Manager", "addTime":"2017-07-01T01:00:00Z", "updateTime":"2017-07-01T01:00:00Z"}]
          
  /stores/{storeId}/jobs/{jobId}:     
    delete:
      summary: "delete a job"
      tags: 
        - 'store'
      parameters: 
        - name: "jobId"
          in: path
          required: true
          type: integer
        - in: path
          name: storeId
          type: string
          required: true
          
      description: "" 
      responses:
        200:
          description: OK
    put:
      summary: "update a job"
      tags: 
        - 'store'
      parameters: 
        - name: "jobId"
          in: path
          required: true
          type: integer
        - in: path
          name: storeId
          type: string
          required: true
        - in: body
          name: job
          schema: 
            type: object
            properties:
              name:
                type: string
          
      description: "" 
      responses:
        200:
          description: OK
      
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
    flow: implicit
    scopes:
      write_pets: modify pets in your account
      read_pets: read your pets
  basicAuth:
    type: basic
    
definitions:
  SignUpRequest:
    description: registry request body data
    properties:
      username:
        type: string
        description: mobile number
        example: "15308039727"
      verCode:
        type: string
        description: verification code
        example: "442901"
      password:
        type: string
        description: password
        example: "1qaz@wsx"
    required:
      - username
      - verCode
      - password
      
  Job:
    description: job type
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "Cashier"
      addTime:
        type: string
        example: "2017-07-06T09:01:00Z"
      updateTime:
        type: string
        example: "2017-07-06T09:01:00Z"
  
        
  
